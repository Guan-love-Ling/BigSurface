Surface DTX Driver
================================================================================

Description: Driver documentation for clipboard detachment system.
Devices:     Surface Book 2 & 3.
Date:        2020-10-20


The DTX driver is responsible for proper clipboard detachment and
re-attachment handling. To this end, it provides the `/dev/surface/dtx`
device file, through which it can interface with a user-space daemon. This
daemon is then ultimately responsible for determining and taking necessary
actions, such as unmounting devices attached to the base,
unloading/reloading the graphics-driver, user-notifications, etc.

There are two basic communication principles used in this driver: Commands
(in other parts of the documentation also referred to as requests) and
events. Commands are sent to the EC and may have a different implications in
different contexts. Events are sent by the EC upon some internal state
change. Commands are always driver-initiated, whereas events are always
initiated by the EC.


Basics / Concepts / Nomenclature
--------------------------------------------------------------------------------

Clipboard:
    The detachable upper part of the Surface Book, housing the screen and
    CPU.

Base:
    The lower part of the Surface Book from which the clipboard can be
    detached, optionally (model dependent) housing the discrete GPU (dGPU).

Latch:
    The mechanism keeping the clipboard attached to the base in normal
    operation and allowing it to be detached when requested.

Silently ignored commands:
    The command is accepted by the EC as a valid command and acknowledged
    (following the standard communication protocol), but the EC does not act
    upon it, i.e. ignores it.


Detachment Process
--------------------------------------------------------------------------------

Warning: This part of the documentation is based on reverse engineering and
testing and thus may contain errors or be incomplete.

Latch states:

The latch mechanism has two major states: "open" and "closed". In the
"closed" state (default), the clipboard is secured to the base, whereas in
the "open" state, the clipboard can be removed by a user.

The latch can additionally be locked and, correspondingly, unlocked, which
can influence the detachment procedure. Specifically, this locking mechanism
is intended to prevent the the dGPU, positioned in the base of the device,
from being hot-unplugged while in use. More details can be found in the
documentation for the detachment procedure below. By default, the latch is
unlocked.

Detachment Procedure:

Note that the detachment process is governed fully by the EC. The
surface_dtx driver only relays events from the EC to user-space and commands
from user-space to the EC, i.e. it does not influence this process.

The detachment process is started with the user pressing the "detach" button
on the base of the device, or sending the latch-request command. Following
that:

 1. The EC turns on the indicator led on the detach-button, sends a
    detach-request event, and awaits further instructions/commands. In case
    the latch is unlocked, the led will flash green. If the latch has been
    locked, the led will be solid red.

 2. The event is, via the surface_dtx driver, relayed to user-space, where an
    appropriate user-space daemon can handle it and send instructions back
    to the EC.

 3. The EC waits for instructions from user-space and acts according to them.
    If the EC does not receive any instructions in a given period, it will
    time out and continue as follows:

      - If the latch is unlocked, the EC will open the latch and the
        clipboard can be detached from the base. This is the exact behavior as
        without this driver or any user-space daemon. See the latch-confirm
        response description below for more details on the follow-up
        behavior of the EC.

      - If the latch is locked, the EC will _not_ open the latch, meaning
        the clipboard cannot be detached from the base. Furthermore, the EC
        sends a cancel event detailing this with the cancel reason
        SDTX_DETACH_TIMEDOUT (see section "Events" for details).

Valid responses by a user-space daemon to a detachment request event are:

  - Send "latch-request" command. This will immediately abort the
    detachment process. Furthermore, the EC will send a detach-request
    event, similar to the user pressing the detach-button to cancel said
    process (see below).

  - Send "latch-confirm" command. This will cause the EC to open the latch,
    after which the user can separate clipboard and base.

    As this changes the latch state, a latch-status event will be sent once
    the latch has been opened successfully. If the EC fails to open the
    latch, e.g. due to hardware error or low battery, a latch-error event
    will be sent with the error code indicating the specific failure.

    If the latch is currently locked, the latch will automatically be
    unlocked before it is opened.

  - Send "latch-heartbeat" command. This will reset the internal timeout. No
    other actions will be performed, i.e. the detachment process will
    neither be completed nor canceled, and the EC will still be waiting for
    further responses.

  - Send "latch-cancel" command. This will abort the detachment process,
    similar to the "latch-request" command described above or the button
    press described below. A generic request event is send in response to
    this. In contrast to those, however, this command does not trigger a new
    detachment process if none is currently in progress.

  - Do nothing. The detachment process eventually times out as described in
    point 3.

See Section "Commands" on the specification of these responses.

It is important to note that, if the user presses the detach button at any
point when a detachment operation is in progress (i.e. after the the EC has
sent the initial detach-request event and before it received the
corresponding response concluding the process), the detachment process is
canceled on the EC-level and an identical event is being sent. Thus a
detach-request event, by itself, does not signal the start of the detachment
process.

The detachment process may further be canceled by the EC due to hardware
failures or a low clipboard battery. This is done via an error event with
the corresponding error code.


Commands
--------------------------------------------------------------------------------

All commands below are standard Surface-EC commands with the following
properties except where stated otherwise:

    Field   Value   Note
    ------------------------------------------------------------------------
    TC      0x11
    IID     0x00
    CID     ....    See below.
    SNC     0x00    No return-package.
    CDL     0x00    No command payload.

Command-Codes/IDs:

    CID 0x06:
        Lock latch.

        Transfers the latch from 'closed' to 'locked' state. This command
        will be silently ignored if the latchas is already locked.

        Context:
            Valid only outside detachment-process (otherwise silently ignored).

    CID 0x07:
        Unlock latch.

        Transfers the latch from 'locked' to 'closed'/unlocked state. This
        command only unlocks the latch. It will not open the latch when sent
        during an ongoing detachment process. It will be silently ignored
        if the latch is already unlocked.

        Context:
            Valid in any context.

    CID 0x08:
        Generic latch request.

        Behavior depends on the context: If no detachment-process is active,
        detachment is requested. Otherwise the currently active
        detachment-process will be aborted.

        If a detachment process is canceled by this operation, a generic
        detachment request event (CID=0x06) will be sent.

        Context:
            Valid in any context, although with different behavior.

    CID 0x09:
        Open latch / confirm latch open.

        Acknowledges and confirms a latch request. If sent during an
        ongoing detachment process, this command causes the latch to be
        opened immediately. The latch will also be opened if it has been
        locked. In this case, the latch lock is reset to the unlocked state.

        Context:
            Valid only during detachment-process (otherwise silently ignored).

    CID 0x0a:
        Heartbeat for detachment in progress.

        Sends a heartbeat, essentially resetting the detachment timeout.
        This command can be used to keep the detachment process alive while
        work required for the detachment to succeed is still in progress.

        Context:
            Valid only during detachment-process (otherwise silently ignored).

    CID 0x0b:
        Cancel detachment.

        Cancels detachment in progress. If a detachment process is canceled
        by this operation, a generic detachment request event (CID=0x06)
        will be sent.

        Context:
            Valid only during detachment-process (otherwise silently ignored).

    CID 0x0c, SNC 0x01:
        Get connection state.

        Get the current base connection state (i.e. attached/detached) and
        the type of the base connected to the clipboard.

        This is command essentially provides a way to query the information
        provided by the connection change event (CID=0x0c).

        Return: 2 bytes: [state, base].
            The `state` byte specifies the detach state, while the `base`
            byte specifies the base type.

            state:
                0x00:   detached (detach success)
                0x01:   attached
                0x02:   not feasible (detach with low battery)

            base:
                0x07:   Ur base
                0x0a:   ZOr base
                0x0d:   Ge base (additional checks/setup?)
                0x0e:   Ce base
                other:  no dGPU (or unknown?)

    CID 0x0d, SNC 0x01:
        Get device operation mode.

        Returns the device operation mode, indicating if and how the base is
        attached to the clipboard.

        Return: 1 byte.
            0x00: Tablet Mode (tablet detached)
            0x01: Laptop Mode (tablet attached normally)
            0x02: Studio Mode (tablet attached but reversed, no keyboard)

    CID 0x11, SNC 0x01:
        Get latch status.

        Get the current latch status or (presumably) the last error
        encountered when trying to open/close the latch.

        This is command essentially provides a way to query the information
        provided by the latch status change event (CID=0x11).

        Return: 1 byte.
            0x00:   Latch closed.
            0x01:   Latch open.
            0x02:   Failed to open.
            0x03:   Failed to remain open.
            0x04:   Failed to close.


Events
--------------------------------------------------------------------------------

Similar to commands, TC is 0x11 and IID is 0x00.

Event Codes/IDs:

    CID 0x0c:
        Physical connection changed. This means real physical contact as in
        clipboard separated from / inserted into base.

        Payload: 2 bytes: [state, base].
            The `state` byte specifies the detach state, while the `base`
            byte specifies the base type.

            state:
                0x00:   detached (detach success)
                0x01:   attached
                0x02:   not feasible (detach with low battery)

            base:
                0x07:   Ur base
                0x0a:   ZOr base
                0x0d:   Ge base (additional checks/setup?)
                0x0e:   Ce base
                other:  no dGPU (or unknown?)

    CID 0x0e:
        Generic detach-request event. Depending on the context, can signal
        initiation or abortion of a detachment-process by a user.

        Payload: None

    CID 0x0f:
        Detachment canceled due to error.

        Payload: 1 byte.
            0x00:   Not feasible (detach with low battery).
            0x02:   The detachment-process timed out while the latch was
                    locked. The latch has not been opened.
            0x03:   Failed to open.
            0x04:   Failed to remain open.
            0x05:   Failed to close.

    CID 0x11:
        Latch status event. Signals change of the latch status, specifically
        when it has been opened or closed. This can be used to indicate to
        the user when the clipboard is ready to be separated from the base.

        Payload: 1 byte.
            0x00:   Latch closed.
            0x01:   Latch opened.
            0x02:   Failed to open.
            0x03:   Failed to remain open.
            0x04:   Failed to close.
